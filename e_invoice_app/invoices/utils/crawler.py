# from selenium import webdriver
# from selenium.webdriver.common.by import By
# from selenium.webdriver.common.keys import Keys
# from selenium.webdriver.support.ui import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager
# from django.utils import timezone
# from invoices.models import CrawledCompanyData, Invoice
# import time
#
# def crawl_taxcode_data(tax_code):
#     """D√πng Selenium ƒë·ªÉ crawl d·ªØ li·ªáu c√¥ng ty t·ª´ masothue.com d·ª±a tr√™n m√£ s·ªë thu·∫ø."""
#     url = "https://masothue.com/"
#
#     options = webdriver.ChromeOptions()
#     options.add_argument("--headless")
#     options.add_argument("--disable-gpu")
#     options.add_argument("--no-sandbox")
#     options.add_argument("--disable-blink-features=AutomationControlled")  # Ch·ªëng detect bot
#     options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36")
#
#     service = Service(ChromeDriverManager().install())
#     driver = webdriver.Chrome(service=service, options=options)
#
#     try:
#         driver.get(url)
#         time.sleep(3)  # ƒê·ª£i trang load l√¢u h∆°n ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
#         driver.maximize_window()
#
#         search_box = WebDriverWait(driver, 10).until(
#             EC.presence_of_element_located((By.XPATH, '//*[@id="search"]'))
#         )
#         search_box.clear()  # X√≥a n·ªôi dung c≈© n·∫øu c√≥
#         search_box.send_keys(tax_code)  # Nh·∫≠p m√£ s·ªë thu·∫ø
#
#         driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
#
#         print(f"üîç ƒê√£ nh·∫≠p MST: {tax_code}, ƒëang t√¨m ki·∫øm...")
#         time.sleep(5)  # Ch·ªù k·∫øt qu·∫£ hi·ªÉn th·ªã
#
#         # ‚úÖ L·∫•y t√™n c√¥ng ty
#         name = driver.find_element(By.XPATH, '//*[@id="main"]/section[1]/div/table[1]/tbody/tr[2]/td[2]/span').text.strip()
#
#         # ‚úÖ L·∫•y ƒë·ªãa ch·ªâ c√¥ng ty
#         try:
#             address_element = driver.find_element(By.XPATH, '//*[@id="main"]/section[1]/div/table[1]/tbody/tr[4]/td[2]/span')
#             address = address_element.text.strip()
#         except:
#             address = "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ"
#
#         # ‚úÖ L·∫•y tr·∫°ng th√°i ho·∫°t ƒë·ªông
#         try:
#             status_element = driver.find_element(By.XPATH, '//*[@id="main"]/section[1]/div/table[1]/tbody/tr[10]/td[2]/a')
#             status = status_element.text.strip()
#         except:
#             status = "Kh√¥ng r√µ tr·∫°ng th√°i"
#
#         # ‚úÖ L∆∞u v√†o database ho·∫∑c c·∫≠p nh·∫≠t n·∫øu ƒë√£ c√≥
#         company, created = CrawledCompanyData.objects.update_or_create(
#             tax_code=tax_code,
#             defaults={
#                 "name": name,
#                 "address": address,
#                 "status": status,
#                 "last_crawled": timezone.now()
#             }
#         )
#
#         print(f"‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng: {name} ({tax_code}) - {address}")
#         return company
#
#     except Exception as e:
#         print(f"‚ùå L·ªói khi crawl MST {tax_code}: {e}")
#         return None
#
#     finally:
#         driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát
#
#
# def crawl_seller_buyer(invoice_id):
#     """Crawl d·ªØ li·ªáu cho c·∫£ ng∆∞·ªùi b√°n & ng∆∞·ªùi mua c·ªßa m·ªôt h√≥a ƒë∆°n."""
#     try:
#         invoice = Invoice.objects.get(id=invoice_id)
#
#         # üîç Ki·ªÉm tra ng∆∞·ªùi b√°n (Seller)
#         if not invoice.crawled_seller:
#             print(f"üîç Crawl d·ªØ li·ªáu cho ng∆∞·ªùi b√°n MST: {invoice.seller.tax_code}")
#             invoice.crawled_seller = crawl_taxcode_data(invoice.seller.tax_code)
#
#         # üîç Ki·ªÉm tra ng∆∞·ªùi mua (Buyer)
#         if not invoice.crawled_buyer:
#             print(f"üîç Crawl d·ªØ li·ªáu cho ng∆∞·ªùi mua MST: {invoice.buyer.tax_code}")
#             invoice.crawled_buyer = crawl_taxcode_data(invoice.buyer.tax_code)
#
#         invoice.save()
#         print(f"‚úÖ Crawl ho√†n th√†nh cho h√≥a ƒë∆°n {invoice.serial}")
#
#     except Invoice.DoesNotExist:
#         print(f"‚ùå Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n ID {invoice_id}")
